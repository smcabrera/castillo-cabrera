def compose val, fun1, fun2
def compose val, fun1
fun1.call(val)
raise "requires block" unless block_given?
fun1.call(yield val)
end
compose(2, fun1) { |val| fun2 val }
@fun2 = method(:double)
compose(2, fun1) { |val| @fun2 val }
compose(2, fun1) { |val| square val }
fun2 val
[1,2,3].each { |val| double }
compose(2, fun1, &method(:square))
$LOAD_PATH
ruby -I bowling_spec.rb
quit()
csv
csv help
Post.connection
Post[0]
Post.new title: "Hey there!" body: "I'm the first post guys! Yippee!"
Post.new (:title "Hey there!" :body "I'm the first post guys! Yippee!")
Ppost
Post(title: "title" body: "body")
Post.create(title: "First post", body: "This is the first post!")
post.comments.create(body: "first comment!")
post = Post.first
post
post.comments.create(body: "First comment!")
post.comments.create(body: "Hey guys I'm here to troll the internet")
comment1 = Comment.first
comment2 = Comment.last
comment2
comment.post
comment2.post
post.comments
post.comments.each { |comment| p comment.body }
post1
post1 = Post.first
puts post1
puts post1.title
post1.tag
posts = Posts.all
Post.first
SELECT "posts".* FROM "posts"
Post.create(title: "Another post", body: "This is the second post.")
Post
Posts
Post.all
p = Post.find(3)
p.comments.count
_
)
vim
require mechanize
require 'mechanize'
clear
q
form
my_page
@posts = Post.all
posts.each {|post| puts post.title}
@posts.each {|post| puts post.title}
@posts[0].title
@posts[3].title
@posts[6].title
itinerary
itineraries
a = itinerary.first
Itinerary.new (name: new itinerary)
Itinerary.new (name: "new itinerary")
Itinerary.new (:name : "new itinerary")
a = Itinerary.new
a.name = "new itinerary"
a.description = "This is the new itinerary for stuff"
a 
Itinerary.new
exit
i = Itinerary.new
i.name = "Heart of the Inca"
i.description = "This is our shortest tour. Enjoy"
i.id = 1
i
day1 = Day.create(title: "Lima")
day1.photo = "nice-photo.jpg"
day1.description = "The PAX first arrive into Lima on this day and mostly just sleep"
day1.save
day1
vi
require 'oauth2'
client = OAuth2::Client.new(ENV['LEGATO_OAUTH_CLIENT_ID'], ENV['LEGATO_OAUTH_SECRET_KEY'], {
  :authorize_url => 'https://accounts.google.com/o/oauth2/auth',
  :token_url => 'https://accounts.google.com/o/oauth2/token'
client.auth_code.authorize_url({
  :scope => 'https://www.googleapis.com/auth/analytics.readonly',
  :redirect_uri => 'http://localhost',
  :access_type => 'offline'
})
export LEGATO_OAUTH_AUTH_CODE=4/XTOnLeIm3sGtg9d2J9bMXxYNSRkz.Qi6DzMcNE0QU3oEBd8DOtNDdjRiYjgI
quit
